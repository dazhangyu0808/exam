/**
 * 排序后输出 id
 * @param {Array<Object>} list
 * @returns {Array<number>}
 * @example
 * [
 *  { id: 2, before: 1 },
 *  { id: 1, last: true },
 *  { id: 3, after: 1 },
 *  { id: 5, first: true },
 *  { id: 6, last: true },
 *  { id: 7, last: true },
 *  { id: 8, last: true },
 * ];
 * 输出为
 * [5, 2, 1, 3, 6, 7, 8];
 */
    function MyLinkedList() {
        const Node = function (element) {
            this.element = element;
            this.prev = null;
            this.next = null;
        };

        let length = 0, head = null;

        //向尾部追加
        this.append = function (element) {
            let node = new Node(element), current, previous;
            if (!head) {
                head = node;
            } else {
                current = head;
                while (current) {
                    previous = current;
                    current = current.next;
                }
                previous.next = node
                node.prev = previous
            }
            length++;
            return true;
        }

        //指定位置插入
        this.insert = function (position, element) {
            if (position > -1 && position <= length) {
                let node = new Node(element), current = head, previous, index = 0;
                if (position === 0) {
                    if (!head) {
                        head = node;
                    } else {
                        node.next = head;
                        head.prev = node;
                        head = node;
                    }
                } else {
                    while (index++ < position) {
                        previous = current;
                        current = current.next;
                    }
                    if (position != length) {
                        node.next = current;
                        current.prev = node;
                    }
                    previous.next = node;
                    node.prev = previous;
                }
                length++;
                return true;
            } else {
                return false;
            }
        };

        //删除指定位置元素
        this.removeAt = function (position) {
            if (position > -1 && position < length) {
                let current = head, index = 0, previous;
                if (position === 0) {
                    head = head.next;
                    head.prev = null;
                } else {
                    while (index++ < position) {
                        previous = current;
                        current = current.next;
                    }

                    if (position === length - 1) {
                        previous.next = null;
                    } else {
                        previous.next = current.next;
                        current.next.prev = previous;
                    }
                };
                length--;
                return current.element;
            } else {
                return false;
            }
        };

        //删除值为element的所有元素
        this.removeEle = function (element) {
            let current = head, previous, num = 0;
            if (current.element === element) {
                head = current.next;
            }
            previous = current;
            current = current.next;

            while (current) {
                if (current.element == element) {
                    previous.next = current.next;
                    if (current.next) {
                        current.next.prev = previous;
                    }
                    current = current.next;
                    length--;
                    num++;
                } else {
                    previous = current;
                    current = current.next;
                }

            }
            return num;
        };

        //删除尾部
        this.remove = function () {
            if (length === 0) {
                return false;
            };

            let current = head, previous;

            if (length === 1) {
                head = null;
                length--;
                return current.element;
            }

            while (current.next) {
                previous = current;
                current = current.next;
            }

            previous.next = null;
            length--;
            return current.element;
        };

        this.indexOf = function (element) {
            let current = head, index = 0;

            while (current && index < length) {
                if (current.element === element) {
                    return index;
                };
                current = current.next;
                index++;
            }

            return false;
        };

        this.isEmpty = function () {
            return length === 0;
        };

        this.size = function () {
            return length;
        };

        this.toString = function () {
            let current = head, string = '';

            while (current) {
                string += current.element;
                current = current.next;
            }
            return string;
        };

        this.getValue = function () {
            
            let current = head, value = [];

            while (current) {
                value.push(current.element);
                current = current.next;
            }
            return value;
        }

        this.getHead = function () {
            return head.element;
        };

        this.getTail = function () {
            let previous, current = head;
            while (current) {
                previous = current;
                current = current.next;
            }
            return previous.element;
        };
    }

    function parse(arr) {
        let myLink = new MyLinkedList();
        for (let items of arr) {
            if (items.first) {
                myLink.insert(0, items.id);
            }
            if (items.last) {
                myLink.append(items.id);
            }
            if (items.before) {
                myLink.insert(items.before - 1, items.id);
            }
            if (items.after) {
                myLink.insert(items.after + 1, items.id)
            }
        }

        return myLink.getValue();
    }


/**
 * 将数组转换成树状结构
 * @param {Array} arr
 * @returns {Object}
 * @example
 * [
 *   { id: 1, name: 'i1' },
 *   { id: 2, name: 'i2', parentId: 1 },
 *   { id: 4, name: 'i4', parentId: 3 },
 *   { id: 3, name: 'i3', parentId: 2 },
 *   { id: 8, name: 'i8', parentId: 7 },
 * ]
 * 转换后
 * {
 *   id: 1,
 *   name: 'i1',
 *   children: [
 *     { id: 2, name: 'i2', parentId: 1, children: [...] },
 *   ]
 * }
 */
function convert2Tree(arr, options) {
	const defaultOptions = {
		root: {},
		id: 'id',
		parentId: 'parentId',
		children: 'children'
	};
	options = { ...defaultOptions, ...options };
	const { root, id, parentId, children } = options;
	for (let item of array) {
		if (+root[id] === item[parentId]) {
			if (!root[children]) {
				root[children] = []
			}
			root[children].push(convert2Tree(arr, { ...options, root: item }))
		}
	}

	return root;
}

/**
 * 实现 setInterval
 * 1. 利用 setTimeout 实现 setInterval
 * 2. 利用 clearTimeout 实现 clearInterval
 */

/**
 * @param {Function} callback
 * @param {number} duration
 * @returns {number}
 * @example
 * mySetInterval(()=> {
 *   console.log('xxx');
 * }, 200);
 */
 
let timeMap = {};
let id = 0;
 
function mySetInterval(callback, duration) {
	let timeId = id;
	id++;
  	let fn = () => {
  		callback();
        timeMap[timeId] = setTimeout(() => {fn()}, duration);
    }
    timeMap[timeId] = setTimeout(fn, duration);
	return timeId;
}

/**
 * @param {number} timer
 * @returns {void}
 * @example
 * const timer = mySetInterval(()=> {
 *   console.log('xxx');
 * }, 200);
 * setTimeout(() => {
 *   myClearInterval(timer);
 * }, 1000);
 */
function myClearInterval(timer) {
	clearTimeout(timeMap[timer]) 
	delete timeMap[timer]
}


